import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns # to visualize regression in a efficient way
df= pd.read_csv('temperatures.csv')
import numpy as np

df.head()
df

#input data
x = df['YEAR']
#output data
y = df['ANNUAL']
#to plot the graph between year and annual temp
plt.title('Temperature of India')
plt.xlabel('Year')
plt.ylabel('Avg annual temp')
plt.scatter(x,y)

x.shape
(117,)
# values is used to convert a column into array
x = x.values
# reshape is used to convert a array 1d array into 2d array
x = x.reshape(117,1)
x.shape
(117, 1)
from sklearn.linear_model import LinearRegression
# here regressor is an object of linearRegression
regressor = LinearRegression()

â–¾ LinearRegression
LinearRegression()
#fit is used to train the machine learning model
regressor.fit(x,y) # where x and y are input and output respectively

regressor.coef_
array([0.01312158])
regressor.intercept_
3.4761897126187016
regressor.predict([[2024]])
array([30.03427031])

#in this code we have passed the input value which are years and passed it into the regressor object which will
#provide us the predicted values of all the years
predicted = regressor.predict(x)
predicted

# mean Absolute error(MAE)
np.mean(abs(y - predicted))
0.22535284978630413
from sklearn.metrics import mean_absolute_error
mean_absolute_error(y, predicted)
0.22535284978630413
from sklearn.metrics import mean_squared_error
mean_squared_error(y,predicted)
0.10960795229110352
from sklearn.metrics import r2_score
r2_score(y,predicted)
0.6418078912783682

plt.title('Temperature of India')
plt.xlabel('Year')
plt.ylabel('Avg annual temp')
plt.scatter(x,y,label='actual')
plt.plot( x, predicted,label='predicted',color='red')
plt.legend()

#instead of writing the above code we can plot the graph using sns
sns.regplot(x='YEAR', y='ANNUAL',data=df)

